Remember:
* The default Django server is not fit for production. Got to use a production server.
* Default server automatically reloads for code changes, but not for file adds (restart needed).
* To create templates for an app, a 'templates' folder has to be created in the app folder.
* The {% static %} template tag is not available for use in static files which arenâ€™t generated by Django, like your stylesheet. You should always use relative paths to link your static files between each other, because then you can change STATIC_URL (used by the static template tag to generate its URLs) without having to modify a bunch of paths in your static files as well.


Commands:
* Create project: 
    django-admin startproject projectName
* Start default server: 
    python manage.py runserver
* Create an app: 
    python manage.py startapp appName
    Then go to settings.py and add the installed app like:
    INSTALLED_APPS = [
    'landingPage.apps.LandingpageConfig', #manually added
    The LandingpageConfig class would have been automatically created in landingPage/apps.py
* Getting a Django shell with the path to siteName/settings.py automatically included:
    python manage.py shell
* For enabling database migrations for an app, it first
    has to be recognized in settings.py. Make an entry in 
    INSTALLED_APPS and then run python manage.py makemigrations appName
* Making model changes is a 3 stage process:
    1. Change models in model.py
    2. Run python manage.py makemigrations
    3. Run python manage.py migrate
* Creating an admin user: 
    python manage.py createsuperuser    
* For the app's models to be accessible in the admin interface:
    in appName/admin.py, type:
    from .models import Question
    admin.site.register(Question)  
* To run test cases for an app:
    python manage.py test appName 
* Use the templating system with {% extends "base.html" %} and {% block contentName %} with {% endblock contentName %} 
* Variables look like this: {{ variable }}
* Filters look like this: {{ name|lower }}. This displays the value of the {{ name }} variable after being filtered through the lower filter, which converts text to lowercase. Use a pipe (|) to apply a filter. 
  Basic terms: https://docs.djangoproject.com/en/3.1/ref/templates/language/
  Filter ref: https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#ref-templates-builtins-filters
* Django's escape filter automatically converts < to &lt etc, to prevent XSS attacks:
    This will be escaped: {{ data }}
    This will not be escaped: {{ data|safe }}
  It can also be used as a tag (https://docs.djangoproject.com/en/3.1/ref/templates/builtins/#ref-templates-builtins-tags):
    {% autoescape off %}
        Hello {{ name }}
    {% endautoescape %}
  And default strings can be specified as:
    {{ data|default:"3 &lt; 2" }}
* Accessing class methods and looping is possible. Even counting.
    {% for comment in task.comment_set.all %}
        {{ comment }}
    {% endfor %}
   and
    {{ task.comment_set.all.count }}
   See: https://docs.djangoproject.com/en/dev/ref/templates/language/#template-inheritance
   The limitation in template function calls, is that arguments can't be passed. The data has to be calculated
   during the view and sent to the template.
* If else also possible:
  {% if athlete_list %}
    Number of athletes: {{ athlete_list|length }}
  {% elif athlete_in_locker_room_list %}
    Athletes should be out of the locker room soon!
  {% else %}
    No athletes.
  {% endif %}
* comment syntax: {# #}.

    
URL finding:
Settings.py has URLCONF -> points to siteName.urls.py -> points to appName.urls.py    
    
    
    
    
    
    
    
    
